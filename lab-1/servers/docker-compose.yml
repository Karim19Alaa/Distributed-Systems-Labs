services:
  db_server:
    build:
      context: .
      dockerfile: ./db_server/Dockerfile
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
  sync_sequential:
    build:
      context: .
      dockerfile: ./sync_backend/sequential/Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - db_server
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    develop:
      watch:
        - action: rebuild
          path: ./sync_backend/sequential
          target: .
        - action: rebuild
          path: ./commons
          target: /app/commons
  sync_threaded:
    build:
      context: .
      dockerfile: ./sync_backend/threaded/Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      - db_server
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    develop:
      watch:
        - action: rebuild
          path: ./sync_backend/threaded
          target: .
        - action: rebuild
          path: ./commons
          target: /app/commons
  sync_threadpool:
    build:
      context: .
      dockerfile: ./sync_backend/threadpool/Dockerfile
    ports:
      - "8083:8080"
    depends_on:
      - db_server
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    develop:
      watch:
        - action: rebuild
          path: ./sync_backend/threadpool
          target: .
        - action: rebuild
          path: ./commons
          target: /app/commons
  async_io_multiplexing:
    build:
      context: .
      dockerfile: ./async_backend/io_multiplexing/Dockerfile
    ports:
      - "8084:8080"
    depends_on:
      - db_server
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    develop:
      watch:
        - action: rebuild
          path: ./async_backend/io_multiplexing
          target: .
        - action: rebuild
          path: ./commons
          target: /app/commons
  async_asyncio:
    build:
      context: .
      dockerfile: ./async_backend/asyncio_server/Dockerfile
    ports:
      - "8085:8080"
    depends_on:
      - db_server
    healthcheck:
      test: ["CMD-SHELL", "echo 'Health check'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 20s
    develop:
      watch:
        - action: rebuild
          path: ./async_backend/asyncio_server
          target: .
        - action: rebuild
          path: ./commons
          target: /app/commons
  # client:
  #   build: ../client/
  #   depends_on:
  #     - sync_sequential
  #     - sync_threaded
  #     - sync_threadpool
  #     - async_io_multiplexing
  #     - async_asyncio
  #   healthcheck: # Add healthcheck to client to ensure the client runs only after the server is up
  #       test: ["CMD-SHELL", "python client.py --num_requests 1"]
  #       interval: 5s
  #       timeout: 10s
  #       retries: 5
  #       start_period: 20s